{"version":3,"file":"../main.css","sources":["main.scss","helpers/_index.scss","helpers/_functions.scss","helpers/_mixins.scss","varibles/_index.scss","varibles/_variables.scss"],"sourcesContent":["@import \"helpers/index\";\n@import \"varibles/index\";\n","@import \"functions\";\n@import \"mixins\";\n","@function rem($px) {\r\n    @return ($px / 16) + rem;\r\n}\r\n\r\n// z-index: z('site-header'); Используется для адекватного определения z-index'a. Выставляем последовательность элементов тут.\r\n@function z($name) {\r\n    @if index($z-indexes, $name) {\r\n        @return (length($z-indexes) - index($z-indexes, $name)) + 1;\r\n    }\r\n    @else {\r\n        @warn 'There is no item \"#{$name}\" in this list; choose one of: #{$z-indexes}';\r\n        @return null;\r\n    }\r\n}\r\n\r\n$z-indexes: (\"loader\", \"burger\", \"sidebar\", \"menu\", \"header-fixed\", \"vidget\",  \"l-default\", \"shadow\",  \"checkbox-link\" , \"checkbox\",  \"checkbox-btn\");\r\n\r\n@function max($numbers...) {\r\n    @return m#{a}x(#{$numbers});\r\n}\r\n\r\n@function min($numbers...) {\r\n    @return m#{i}n(#{$numbers});\r\n}","// миксин для создания масштабируемых элементов, чтобы поддерживать соотношение. @include responsive-ratio(16,9)\r\n@mixin responsive-ratio($x, $y, $pseudo: false) {\r\n  $padding: unquote(($y / $x) * 100 + \"%\");\r\n  @if $pseudo {\r\n    &:before {\r\n      @include pseudo($pos: relative);\r\n      width: 100%;\r\n      padding-top: $padding;\r\n    }\r\n  } @else {\r\n    padding-top: $padding;\r\n  }\r\n}\r\n\r\n//css треугольники\r\n@mixin css-triangle(\r\n  $color,\r\n  $direction,\r\n  $size: 6px,\r\n  $position: absolute,\r\n  $round: false\r\n) {\r\n  @include pseudo($pos: $position);\r\n  width: 0;\r\n  height: 0;\r\n  @if $round {\r\n    border-radius: 3px;\r\n  }\r\n  @if $direction == down {\r\n    border-left: $size solid transparent;\r\n    border-right: $size solid transparent;\r\n    border-top: $size solid $color;\r\n    margin-top: 0 - round($size / 2.5);\r\n  } @else if $direction == up {\r\n    border-left: $size solid transparent;\r\n    border-right: $size solid transparent;\r\n    border-bottom: $size solid $color;\r\n    margin-bottom: 0 - round($size / 2.5);\r\n  } @else if $direction == right {\r\n    border-top: $size solid transparent;\r\n    border-bottom: $size solid transparent;\r\n    border-left: $size solid $color;\r\n    margin-right: -$size;\r\n  } @else if $direction == left {\r\n    border-top: $size solid transparent;\r\n    border-bottom: $size solid transparent;\r\n    border-right: $size solid $color;\r\n    margin-left: -$size;\r\n  }\r\n}\r\n\r\n//transition\r\n@mixin tr($properties...) {\r\n  $declarations: ();\r\n\r\n  @each $declaration in $properties {\r\n      $duration: .4s;\r\n      $delay: false;\r\n      $timing-function: ease;\r\n      $property: all;\r\n\r\n      @if type-of($declaration) == 'map' {\r\n          $duration: if(map_get($declaration, 'duration'), #{map_get($declaration, 'duration')}, $duration);\r\n          $delay: if(map_get($declaration, 'delay'), #{map_get($declaration, 'delay')}, $delay);\r\n          $timing-function: if(map_get($declaration, 'timing-function'), #{map_get($declaration, 'timing-function')}, $timing-function);\r\n          $property: if(map_get($declaration, 'property'), #{map_get($declaration, 'property')}, $property);\r\n      } @else {\r\n          $property: $declaration;\r\n      }\r\n      \r\n      $delayValue: if($delay, ' ' + $delay, '');\r\n      $declarations: append($declarations, #{$property + ' ' + $duration + $delayValue + ' ' + $timing-function}, comma);\r\n  }\r\n\r\n  transition: $declarations;\r\n}\r\n\r\n\r\n","@import \"variables\";\n","$primary_font: \"Roboto\", sans-serif;\n$secondary_font: \"Inter\", sans-serif;\n\n// colors\n$black: #000203;\n$black_2: #0f0f0f;\n$black_light: #333333;\n$grey_dark: #424346;\n$grey: #4e5056;\n$grey_light: #656669;\n$grey_light_more: #c6c7d0;\n$grey_light_more_2: #ceced0;\n$grey_white: #ebebef;\n$white: #ffffff;\n$red: #d91745;\n"],"names":[],"mappings":""}